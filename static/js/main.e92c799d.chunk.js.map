{"version":3,"sources":["utilities/functions/common.js","ColorImage/index.js","App.js","reportWebVitals.js","index.js"],"names":["generateNumberCollectionsByModule","modulo","max","arr","i","push","RectangleRow","props","rowData","rowIndex","length","map","colData","colIndex","x","y","width","height","fill","r","g","b","RectangleList","array","ColorImage","VIEWPORT_HEIGHT","RGB_Array","RGB","redColor","greenColor","blueColor","rgbArr","forEach","newRGB_R","Object","assign","newRGB_G","newRGB_B","size","chunk","last","splitArrayIntoChunks","getAllRGBColors","viewBox","xmlns","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qIAAaA,EAAoC,SAACC,GAGhD,IAHoE,IAAbC,EAAY,uDAAR,IACrDC,EAAM,GACRC,EAAI,EACDA,GAAKF,GACNE,EAAIH,IAAW,GACjBE,EAAIE,KAAKD,GAEXA,IAEF,OAAOD,G,OCAT,SAASG,EAAaC,GAAO,IACpBC,EAAoBD,EAApBC,QAAQC,EAAYF,EAAZE,SACf,OAAGD,GAAWA,EAAQE,OACbF,EAAQG,KAAI,SAACC,EAAQC,GAC1B,OACI,sBAAqBC,EAAGD,EAAUE,EAAGN,EAAUO,MAAO,EAAGC,OAAQ,EAAGC,KAAI,cAASN,EAAQO,EAAjB,YAAsBP,EAAQQ,EAA9B,YAAmCR,EAAQS,EAA3C,MAA7DR,MAIX,6BAGV,IAAMS,EAAe,SAAC,GAAW,IAAVC,EAAS,EAATA,MACrB,OAAGA,GAASA,EAAMb,OACTa,EAAMZ,KAAI,SAACH,EAAQC,GACxB,OAAO,cAACH,EAAD,CAA6BE,QAASA,EAASC,SAAUA,GAAtCA,MAGtB,8BAIK,SAASe,EAAT,GAA6B,IAARR,EAAO,EAAPA,MAC5BC,EAAWQ,GAAqCT,EAChDU,EDRuB,WAC7B,IAAMC,EAAM,CACVR,EAAG,EACHC,EAAG,EACHC,EAAG,GAGCO,EAAW5B,EAAkC,EAAE,KAC/C6B,EAAc7B,EAAkC,EAAE,KAClD8B,EAAa9B,EAAkC,EAAE,KAEjD+B,EAAS,GAgBf,OAdAH,EAASI,SAAQ,SAACb,GAChB,IAAMc,EAAWC,OAAOC,OAAO,GAAIR,GACnCM,EAASd,EAAIA,EACbU,EAAWG,SAAQ,SAACZ,GAClB,IAAMgB,EAAWF,OAAOC,OAAO,GAAIF,GACnCG,EAAShB,EAAIA,EACbU,EAAUE,SAAQ,SAACX,GACjB,IAAMgB,EAAWH,OAAOC,OAAO,GAAIC,GACnCC,EAAShB,EAAIA,EACbU,EAAO1B,KAAKgC,YAnCS,SAACd,EAAMe,GAElC,IADA,IAAMC,EAAQ,GACLnC,EAAI,EAAGA,EAAImB,EAAMb,OAAQN,IAAK,CACrC,IAAMoC,EAAOD,EAAMA,EAAM7B,OAAS,GAC7B8B,GAAQA,EAAK9B,SAAW4B,EAG3BE,EAAKnC,KAAKkB,EAAMnB,IAFhBmC,EAAMlC,KAAK,CAACkB,EAAMnB,KAKtB,OAAOmC,EA8BAE,CAAqBV,EAAO,KCnBjBW,GAClB,OACI,qBAAK1B,MAAOA,EAAOC,OAAQA,EAAQ0B,QAAO,cA7BzB,IA6ByB,YA5BxB,KA4BsEC,MAAM,6BAA9F,SACE,cAAC,EAAD,CAAerB,MAAOG,MC1BfmB,MANf,WACE,OACC,cAACrB,EAAD,CAAYR,MAAO,QCMP8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e92c799d.chunk.js","sourcesContent":["export const generateNumberCollectionsByModule = (modulo,max=255) => {\r\n  const arr = [];\r\n  let i = 0;\r\n  while (i <= max) {\r\n    if (i % modulo === 0) {\r\n      arr.push(i);\r\n    }\r\n    i++;\r\n  }\r\n  return arr;\r\n};\r\n\r\nconst splitArrayIntoChunks = (array,size) =>{\r\n  const chunk = [];\r\n  for (let i = 0; i < array.length; i++) {\r\n    const last = chunk[chunk.length - 1];\r\n    if (!last || last.length === size) {\r\n      chunk.push([array[i]]);\r\n    } else {\r\n      last.push(array[i]);\r\n    }\r\n  }\r\n  return chunk;\r\n}\r\n\r\nexport const getAllRGBColors = () => {\r\n  const RGB = {\r\n    r: 0,\r\n    g: 0,\r\n    b: 0\r\n  };\r\n\r\n  const redColor = generateNumberCollectionsByModule(8,255);\r\n  const greenColor =  generateNumberCollectionsByModule(8,255);\r\n  const blueColor =  generateNumberCollectionsByModule(8,255);\r\n\r\n  const rgbArr = [];\r\n  //generate all color combinations\r\n  redColor.forEach((r)=> {\r\n    const newRGB_R = Object.assign({}, RGB);\r\n    newRGB_R.r = r;\r\n    greenColor.forEach((g) => {\r\n      const newRGB_G = Object.assign({}, newRGB_R)\r\n      newRGB_G.g = g;\r\n      blueColor.forEach((b) => {\r\n        const newRGB_B = Object.assign({}, newRGB_G)\r\n        newRGB_B.b = b;\r\n        rgbArr.push(newRGB_B);\r\n      })\r\n    });\r\n  });\r\n\r\n  return splitArrayIntoChunks(rgbArr,128);\r\n}","//import packages from node modules\r\nimport React from \"react\";\r\nimport {getAllRGBColors} from \"../utilities/functions/common\";\r\n\r\n//define viewport to render all colors\r\n\r\nconst VIEWPORT_WIDTH = 256;\r\nconst VIEWPORT_HEIGHT = 128;\r\n\r\nfunction RectangleRow(props){\r\n  const {rowData,rowIndex} = props;\r\n  if(rowData && rowData.length){\r\n    return rowData.map((colData,colIndex)=>{\r\n      return (\r\n          <rect key={colIndex} x={colIndex} y={rowIndex} width={1} height={1} fill={`rgb(${colData.r},${colData.g},${colData.b})`}/>\r\n      )\r\n    })\r\n  }\r\n  return (<></>)\r\n}\r\n\r\nconst RectangleList= ({array})=>{\r\n  if(array && array.length){\r\n    return array.map((rowData,rowIndex)=>{\r\n      return(<RectangleRow key={rowIndex} rowData={rowData} rowIndex={rowIndex} />)\r\n    })\r\n  }\r\n  return (<></>)\r\n}\r\n\r\n\r\nexport default function ColorImage({width}){\r\n  const height = ( VIEWPORT_HEIGHT / VIEWPORT_WIDTH ) * width;\r\n  const RGB_Array = getAllRGBColors();\r\n  return (\r\n      <svg width={width} height={height} viewBox={`0 0 ${VIEWPORT_WIDTH} ${VIEWPORT_HEIGHT}`} xmlns=\"http://www.w3.org/2000/svg\">\r\n        <RectangleList array={RGB_Array} />\r\n      </svg>\r\n  );\r\n}\r\n\r\n\r\n\r\n","import React from \"react\";\n\nimport ColorImage from \"./ColorImage\"\n\nfunction App() {\n  return (\n   <ColorImage width={1280} />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}